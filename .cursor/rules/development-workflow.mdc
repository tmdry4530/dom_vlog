---
description: 
globs: 
alwaysApply: true
---
# 개발 워크플로우 가이드

## 프로젝트 개발 상황

### 현재 상태
이 프로젝트는 **프로토타입 단계**로, 다음과 같은 특징이 있습니다:
- UI/UX 구현 완료
- 데이터베이스 스키마 설계 완료
- 실제 데이터베이스 연결 미구현 (시뮬레이션 상태)

### 핵심 파일들
- 데이터베이스 시뮬레이션: [lib/db.ts](mdc:lib/db.ts)
- 서버 액션: [app/posts/[id]/actions.ts](mdc:app/posts/[id]/actions.ts)
- 메인 레이아웃: [app/layout.tsx](mdc:app/layout.tsx)
- 컴포넌트들: [components/sidebar.tsx](mdc:components/sidebar.tsx), [components/main-content.tsx](mdc:components/main-content.tsx)

## 패키지 관리

### pnpm 사용 원칙
이 프로젝트는 **pnpm**을 기본 패키지 매니저로 사용합니다:

- **패키지 설치**: `pnpm install` 또는 `pnpm i`
- **패키지 추가**: `pnpm add <package-name>`
- **개발 의존성 추가**: `pnpm add -D <package-name>`
- **스크립트 실행**: `pnpm run <script-name>` 또는 `pnpm <script-name>`
- **패키지 제거**: `pnpm remove <package-name>`

### pnpm 장점
- **디스크 공간 절약**: 패키지 중복 저장 방지
- **빠른 설치 속도**: 심볼릭 링크 활용
- **엄격한 의존성 관리**: phantom dependency 방지
- **모노레포 지원**: workspace 기능 내장

### 주의사항
- **항상 pnpm 사용**: npm이나 yarn 대신 pnpm만 사용
- **pnpm-lock.yaml 관리**: 버전 관리에 포함하여 일관성 유지
- **스크립트 실행**: `pnpm run` 생략 가능 (예: `pnpm dev`)

## 개발 우선순위

### 1. 높은 우선순위 (즉시 구현 필요)
1. **실제 데이터베이스 연결**
   - Supabase 또는 PostgreSQL 연결
   - 환경 변수 설정
   - 실제 CRUD 작업 구현

2. **에러 처리 시스템**
   - 글로벌 에러 바운더리
   - 로딩 상태 컴포넌트
   - 404 페이지

3. **SEO 최적화**
   - 메타데이터 개선
   - Open Graph 설정
   - 사이트맵 생성

### 2. 중간 우선순위
1. **사용자 인증 시스템**
2. **댓글 시스템 UI**
3. **검색 기능 실제 구현**
4. **관리자 대시보드**

### 3. 낮은 우선순위
1. **PWA 기능**
2. **다국어 지원**
3. **성능 모니터링**

## 코드 품질 관리

### 1. 코딩 스타일
- **TypeScript Strict 모드** 사용
- **ESLint** 규칙 준수
- **Prettier** 코드 포맷팅
- **명명 규칙** 일관성 유지

### 2. 컴포넌트 설계 원칙
- **단일 책임 원칙** 준수
- **재사용 가능한 컴포넌트** 작성
- **Props 타입 명시**
- **접근성 고려**

### 3. 성능 최적화
- **서버 컴포넌트 우선 사용**
- **동적 임포트** 활용
- **이미지 최적화**
- **번들 크기 모니터링**

## Git 워크플로우

### 1. 브랜치 전략
```
main              # 프로덕션 브랜치
├── develop       # 개발 브랜치  
├── feature/*     # 기능 개발
├── bugfix/*      # 버그 수정
└── hotfix/*      # 긴급 수정
```

### 2. 커밋 메시지 규칙
```
feat: 새로운 기능 추가
fix: 버그 수정
docs: 문서 수정
style: 스타일 변경
refactor: 코드 리팩토링
test: 테스트 추가
chore: 빌드/환경 설정
```

## 테스팅 전략

### 1. 단위 테스트
- **컴포넌트 렌더링 테스트**
- **함수 로직 테스트**
- **API 함수 테스트**

### 테스트 실행 명령어
```bash
pnpm test        # 테스트 실행
pnpm test:watch  # 테스트 감시 모드
pnpm test:coverage # 커버리지 확인
```

### 2. 통합 테스트
- **페이지 흐름 테스트**
- **데이터 페칭 테스트**
- **사용자 인터랙션 테스트**

### 3. E2E 테스트
- **핵심 사용자 플로우**
- **크로스 브라우저 테스트**

## 배포 전략

### 1. 개발 환경
```bash
pnpm dev         # 로컬 개발 서버
pnpm build       # 프로덕션 빌드
pnpm start       # 프로덕션 서버 실행
pnpm lint        # 코드 검사
pnpm type-check  # 타입 검사
```

### 2. 스테이징 환경
- **Vercel Preview** 활용
- **기능 테스트** 수행
- **pnpm build** 성공 확인

### 3. 프로덕션 환경
- **성능 최적화** 확인
- **SEO 검증**
- **보안 검토**
- **pnpm audit** 보안 검사

## 의존성 관리

### 1. 패키지 추가 시 고려사항
- **번들 크기 영향도** 확인
- **라이선스 호환성** 검토
- **보안 취약점** 검사
- **유지보수 상태** 확인

### 2. 정기적인 의존성 관리
```bash
pnpm outdated    # 업데이트 가능한 패키지 확인
pnpm update      # 패키지 업데이트
pnpm audit       # 보안 취약점 검사
pnpm audit --fix # 자동 보안 수정
```

### 3. 의존성 분류
- **dependencies**: 프로덕션 필수 패키지
- **devDependencies**: 개발/빌드 도구
- **peerDependencies**: 호스트 애플리케이션 의존성

## 주의사항

### 1. 기존 코드 보존
- **사용자가 수정한 코드는 되돌리지 않음**
- **기존 스타일링 유지**
- **컴포넌트 구조 보존**

### 2. 점진적 개선
- **한 번에 하나의 기능만 구현**
- **기존 기능 영향 최소화**
- **백워드 호환성 유지**

### 3. 문서화
- **변경사항 기록**
- **API 문서 업데이트**
- **README 유지보수**

### 4. pnpm 사용 규칙
- **절대 npm/yarn 사용 금지**: 의존성 충돌 방지
- **pnpm-lock.yaml 커밋**: 팀 간 일관성 유지
- **Global 패키지 최소화**: 프로젝트별 의존성 관리
- **Workspace 활용**: 모노레포 구조 시 pnpm workspace 사용





