-- ====================================================================
-- WARNING: THIS SCRIPT WILL DELETE ALL EXISTING TABLES AND DATA!
-- Use with caution.
-- ====================================================================

-- Step 1: Drop all public tables in the correct order to avoid foreign key conflicts.
DROP TABLE IF EXISTS public.ai_suggested_categories CASCADE;
DROP TABLE IF EXISTS public.ai_suggested_tags CASCADE;
DROP TABLE IF EXISTS public.seo_scores CASCADE;
DROP TABLE IF EXISTS public.external_links CASCADE;
DROP TABLE IF EXISTS public.announcements CASCADE;
DROP TABLE IF EXISTS public.comments CASCADE;
DROP TABLE IF EXISTS public.post_tags CASCADE;
DROP TABLE IF EXISTS public.tags CASCADE;
DROP TABLE IF EXISTS public.post_categories CASCADE;
DROP TABLE IF EXISTS public.visits CASCADE; -- Added this line
DROP TABLE IF EXISTS public.posts CASCADE;
DROP TABLE IF EXISTS public.categories CASCADE;
DROP TABLE IF EXISTS public.profiles CASCADE;


-- ====================================================================
-- Step 2: Recreate all tables from scratch with the correct schema.
-- ====================================================================

-- Profiles Table (with email column)
CREATE TABLE public.profiles (
    id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
    username TEXT UNIQUE NOT NULL,
    email TEXT UNIQUE, -- This was the missing column
    full_name TEXT,
    avatar_url TEXT,
    website TEXT,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT username_length CHECK (char_length(username) >= 3)
);

-- Categories Table
CREATE TABLE public.categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    slug TEXT UNIQUE NOT NULL,
    description TEXT,
    color TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Posts Table
CREATE TABLE public.posts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    author_id UUID NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    slug TEXT UNIQUE NOT NULL,
    content TEXT,
    excerpt TEXT,
    status TEXT DEFAULT 'DRAFT' NOT NULL,
    published_at TIMESTAMP WITH TIME ZONE,
    featured_image_url TEXT,
    view_count INT DEFAULT 0,
    meta_description TEXT,
    ai_summary TEXT,
    ai_writing_style_analysis TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Post-Category Relationship Table
CREATE TABLE public.post_categories (
    post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
    category_id BIGINT NOT NULL REFERENCES public.categories(id) ON DELETE CASCADE,
    is_ai_suggested BOOLEAN DEFAULT FALSE,
    confidence_score FLOAT,
    PRIMARY KEY (post_id, category_id)
);

-- Visits Table for daily visitor counts
CREATE TABLE public.visits (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    visited_at DATE NOT NULL UNIQUE,
    count INT DEFAULT 1 NOT NULL
);

-- Tags Table
CREATE TABLE public.tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT UNIQUE NOT NULL,
    slug TEXT UNIQUE NOT NULL
);

-- Post-Tag Relationship Table
CREATE TABLE public.post_tags (
    post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
    tag_id BIGINT NOT NULL REFERENCES public.tags(id) ON DELETE CASCADE,
    PRIMARY KEY (post_id, tag_id)
);

-- Comments Table
CREATE TABLE public.comments (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
    author_id UUID REFERENCES public.profiles(id) ON DELETE SET NULL,
    parent_comment_id BIGINT REFERENCES public.comments(id) ON DELETE CASCADE,
    content TEXT NOT NULL,
    author_name TEXT,
    author_email TEXT,
    approved BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Announcements Table
CREATE TABLE public.announcements (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    published_at TIMESTAMP WITH TIME ZONE,
    expires_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- External Links Table
CREATE TABLE public.external_links (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    url TEXT NOT NULL,
    display_order INT DEFAULT 0
);

-- SEO Scores Table
CREATE TABLE public.seo_scores (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    post_id BIGINT UNIQUE NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
    score INT,
    report TEXT,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- AI Suggested Tags Table
CREATE TABLE public.ai_suggested_tags (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
    tag_name TEXT NOT NULL,
    confidence_score FLOAT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- AI Suggested Categories Table
CREATE TABLE public.ai_suggested_categories (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    post_id BIGINT NOT NULL REFERENCES public.posts(id) ON DELETE CASCADE,
    category_id BIGINT NOT NULL REFERENCES public.categories(id) ON DELETE CASCADE,
    confidence_score FLOAT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Add Indexes for performance
CREATE INDEX IF NOT EXISTS idx_posts_author_id ON public.posts(author_id);
CREATE INDEX IF NOT EXISTS idx_posts_slug ON public.posts(slug);
CREATE INDEX IF NOT EXISTS idx_comments_post_id ON public.comments(post_id);
CREATE INDEX IF NOT EXISTS idx_post_categories_category_id ON public.post_categories(category_id);


-- ====================================================================
-- Step 3: Insert admin user profile.
-- IMPORTANT: Make sure you have already created the user 
-- 'admin@test.com' in the Supabase Authentication UI before running this.
-- ====================================================================

INSERT INTO public.profiles (id, username, email, full_name)
SELECT id, 'admin', 'admin@test.com', 'Admin User'
FROM auth.users
WHERE email = 'admin@test.com'
ON CONFLICT (id) DO NOTHING;

-- ====================================================================
-- Step 4: Create RPC for related posts
-- ====================================================================

CREATE OR REPLACE FUNCTION public.get_related_posts(
    _current_post_id BIGINT,
    _tag_ids BIGINT[],
    _limit INT
)
RETURNS TABLE (
    id BIGINT,
    title TEXT,
    slug TEXT,
    published_at TIMESTAMP WITH TIME ZONE,
    view_count INT
) 
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    SELECT
        p.id,
        p.title,
        p.slug,
        p.published_at,
        p.view_count
    FROM
        public.posts p
    JOIN
        public.post_tags pt ON p.id = pt.post_id
    WHERE
        p.id != _current_post_id
        AND pt.tag_id = ANY(_tag_ids)
        AND p.status = 'PUBLISHED'
    GROUP BY
        p.id
    ORDER BY
        COUNT(pt.tag_id) DESC, -- 가장 많은 태그를 공유하는 순
        p.published_at DESC
    LIMIT
        _limit;
END;
$$;

-- ====================================================================
-- Step 5: Create RPC for visit counts
-- ====================================================================

CREATE OR REPLACE FUNCTION public.increment_visit(_visited_at DATE)
RETURNS void 
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    INSERT INTO public.visits (visited_at, count)
    VALUES (_visited_at, 1)
    ON CONFLICT (visited_at)
    DO UPDATE SET count = visits.count + 1;
END;
$$;

CREATE OR REPLACE FUNCTION public.get_visit_counts()
RETURNS TABLE (
    total BIGINT,
    today BIGINT,
    yesterday BIGINT
) 
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
    RETURN QUERY
    SELECT
        COALESCE((SELECT SUM(count)::BIGINT FROM public.visits), 0) AS total,
        COALESCE((SELECT count::BIGINT FROM public.visits WHERE visited_at = CURRENT_DATE), 0) AS today,
        COALESCE((SELECT count::BIGINT FROM public.visits WHERE visited_at = CURRENT_DATE - INTERVAL '1 day'), 0) AS yesterday;
END;
$$;

-- ====================================================================
-- Step 6: Grant permissions for RPC functions
-- ====================================================================

-- Grant execute permissions to authenticated and anonymous users
GRANT EXECUTE ON FUNCTION public.get_related_posts(BIGINT, BIGINT[], INT) TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_related_posts(BIGINT, BIGINT[], INT) TO anon;

GRANT EXECUTE ON FUNCTION public.increment_visit(DATE) TO authenticated;
GRANT EXECUTE ON FUNCTION public.increment_visit(DATE) TO anon;

GRANT EXECUTE ON FUNCTION public.get_visit_counts() TO authenticated;
GRANT EXECUTE ON FUNCTION public.get_visit_counts() TO anon;

